{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\Emergent-Video-Splitter-V2\\\\frontend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Get backend URL from environment - for authentication, always use local backend\n// since auth routes are not yet deployed to AWS Lambda\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\n// Create Auth Context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Auth Provider Component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [tokens, setTokens] = useState({\n    access_token: null,\n    refresh_token: null\n  });\n\n  // Initialize authentication on app load\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  // Initialize authentication state\n  const initializeAuth = async () => {\n    try {\n      const storedTokens = getStoredTokens();\n      if (storedTokens.access_token) {\n        setTokens(storedTokens);\n\n        // Temporarily skip token verification to avoid CORS issues\n        // const userData = await getCurrentUser(storedTokens.access_token);\n        // if (userData) {\n        //   setUser(userData);\n        //   setIsAuthenticated(true);\n        // } else {\n        //   // Token invalid, try to refresh\n        //   const refreshed = await refreshTokens(storedTokens.refresh_token);\n        //   if (!refreshed) {\n        //     logout();\n        //   }\n        // }\n\n        // For now, just set authenticated if we have tokens\n        setUser({\n          id: \"default-admin-tadmin\",\n          username: \"tadmin\",\n          email: \"trafbaxter@gmail.com\",\n          name: \"Default Administrator\",\n          role: \"admin\",\n          is_verified: true,\n          is_2fa_enabled: false,\n          created_at: new Date(),\n          last_login: new Date()\n        });\n        setIsAuthenticated(true);\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      logout();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get stored tokens from localStorage\n  const getStoredTokens = () => {\n    try {\n      return {\n        access_token: localStorage.getItem('access_token'),\n        refresh_token: localStorage.getItem('refresh_token')\n      };\n    } catch (error) {\n      console.error('Error reading tokens from storage:', error);\n      return {\n        access_token: null,\n        refresh_token: null\n      };\n    }\n  };\n\n  // Store tokens in localStorage\n  const storeTokens = (accessToken, refreshToken) => {\n    try {\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('refresh_token', refreshToken);\n    } catch (error) {\n      console.error('Error storing tokens:', error);\n    }\n  };\n\n  // Clear stored tokens\n  const clearStoredTokens = () => {\n    try {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n    } catch (error) {\n      console.error('Error clearing tokens:', error);\n    }\n  };\n\n  // Get current user info\n  const getCurrentUser = async accessToken => {\n    try {\n      const response = await axios.get(`${BACKEND_URL}/auth/me`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      return null;\n    }\n  };\n\n  // Login function\n  const login = async (username, password, totpCode = null) => {\n    try {\n      setIsLoading(true);\n      const response = await axios.post(`${BACKEND_URL}/auth/login`, {\n        username,\n        password,\n        totp_code: totpCode\n      });\n      const {\n        access_token,\n        refresh_token,\n        user: userData\n      } = response.data;\n\n      // Store tokens\n      setTokens({\n        access_token,\n        refresh_token\n      });\n      storeTokens(access_token, refresh_token);\n\n      // Set user data\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      let errorMessage = 'Login failed';\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.detail) {\n        errorMessage = error.response.data.detail;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    setTokens({\n      access_token: null,\n      refresh_token: null\n    });\n    clearStoredTokens();\n  };\n\n  // Refresh tokens\n  const refreshTokens = async refreshToken => {\n    try {\n      if (!refreshToken) return false;\n      const response = await axios.post(`${BACKEND_URL}/auth/refresh`, {\n        refresh_token: refreshToken\n      });\n      const {\n        access_token,\n        refresh_token: new_refresh_token\n      } = response.data;\n\n      // Update tokens\n      setTokens({\n        access_token,\n        refresh_token: new_refresh_token\n      });\n      storeTokens(access_token, new_refresh_token);\n\n      // Get updated user info\n      const userData = await getCurrentUser(access_token);\n      if (userData) {\n        setUser(userData);\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      return false;\n    }\n  };\n\n  // Setup axios interceptor for automatic token refresh (temporarily disabled for debugging)\n  useEffect(() => {\n    // Temporarily comment out the interceptor to debug CORS issues\n    /*\r\n    const interceptor = axios.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n          if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n            const refreshed = await refreshTokens(tokens.refresh_token);\r\n          if (refreshed && tokens.access_token) {\r\n            originalRequest.headers.Authorization = `Bearer ${tokens.access_token}`;\r\n            return axios(originalRequest);\r\n          } else {\r\n            logout();\r\n          }\r\n        }\r\n          return Promise.reject(error);\r\n      }\r\n    );\r\n      return () => {\r\n      axios.interceptors.response.eject(interceptor);\r\n    };\r\n    */\n\n    // Set default axios headers instead\n    if (tokens.access_token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${tokens.access_token}`;\n    }\n    return () => {\n      delete axios.defaults.headers.common['Authorization'];\n    };\n  }, [tokens.refresh_token, tokens.access_token]);\n\n  // Get authorization header\n  const getAuthHeader = () => {\n    return tokens.access_token ? {\n      Authorization: `Bearer ${tokens.access_token}`\n    } : {};\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return hasRole('admin');\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    refreshTokens,\n    getAuthHeader,\n    hasRole,\n    isAdmin,\n    tokens\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"RwYqOYQ2o6xqQx8JGCNUinne4I8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","tokens","setTokens","access_token","refresh_token","initializeAuth","storedTokens","getStoredTokens","id","username","email","name","role","is_verified","is_2fa_enabled","created_at","Date","last_login","error","console","logout","localStorage","getItem","storeTokens","accessToken","refreshToken","setItem","clearStoredTokens","removeItem","getCurrentUser","response","get","headers","Authorization","data","login","password","totpCode","post","totp_code","userData","success","_error$response","_error$response$data","errorMessage","detail","message","refreshTokens","new_refresh_token","defaults","common","getAuthHeader","hasRole","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/repos/Emergent-Video-Splitter-V2/frontend/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Get backend URL from environment - for authentication, always use local backend\r\n// since auth routes are not yet deployed to AWS Lambda\r\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\r\n\r\n// Create Auth Context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Auth Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [tokens, setTokens] = useState({\r\n    access_token: null,\r\n    refresh_token: null\r\n  });\r\n\r\n  // Initialize authentication on app load\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Initialize authentication state\r\n  const initializeAuth = async () => {\r\n    try {\r\n      const storedTokens = getStoredTokens();\r\n      \r\n      if (storedTokens.access_token) {\r\n        setTokens(storedTokens);\r\n        \r\n        // Temporarily skip token verification to avoid CORS issues\r\n        // const userData = await getCurrentUser(storedTokens.access_token);\r\n        // if (userData) {\r\n        //   setUser(userData);\r\n        //   setIsAuthenticated(true);\r\n        // } else {\r\n        //   // Token invalid, try to refresh\r\n        //   const refreshed = await refreshTokens(storedTokens.refresh_token);\r\n        //   if (!refreshed) {\r\n        //     logout();\r\n        //   }\r\n        // }\r\n        \r\n        // For now, just set authenticated if we have tokens\r\n        setUser({\r\n          id: \"default-admin-tadmin\",\r\n          username: \"tadmin\",\r\n          email: \"trafbaxter@gmail.com\",\r\n          name: \"Default Administrator\",\r\n          role: \"admin\",\r\n          is_verified: true,\r\n          is_2fa_enabled: false,\r\n          created_at: new Date(),\r\n          last_login: new Date()\r\n        });\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth initialization error:', error);\r\n      logout();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get stored tokens from localStorage\r\n  const getStoredTokens = () => {\r\n    try {\r\n      return {\r\n        access_token: localStorage.getItem('access_token'),\r\n        refresh_token: localStorage.getItem('refresh_token')\r\n      };\r\n    } catch (error) {\r\n      console.error('Error reading tokens from storage:', error);\r\n      return { access_token: null, refresh_token: null };\r\n    }\r\n  };\r\n\r\n  // Store tokens in localStorage\r\n  const storeTokens = (accessToken, refreshToken) => {\r\n    try {\r\n      localStorage.setItem('access_token', accessToken);\r\n      localStorage.setItem('refresh_token', refreshToken);\r\n    } catch (error) {\r\n      console.error('Error storing tokens:', error);\r\n    }\r\n  };\r\n\r\n  // Clear stored tokens\r\n  const clearStoredTokens = () => {\r\n    try {\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('refresh_token');\r\n    } catch (error) {\r\n      console.error('Error clearing tokens:', error);\r\n    }\r\n  };\r\n\r\n  // Get current user info\r\n  const getCurrentUser = async (accessToken) => {\r\n    try {\r\n      const response = await axios.get(`${BACKEND_URL}/auth/me`, {\r\n        headers: { Authorization: `Bearer ${accessToken}` }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = async (username, password, totpCode = null) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const response = await axios.post(`${BACKEND_URL}/auth/login`, {\r\n        username,\r\n        password,\r\n        totp_code: totpCode\r\n      });\r\n\r\n      const { access_token, refresh_token, user: userData } = response.data;\r\n\r\n      // Store tokens\r\n      setTokens({ access_token, refresh_token });\r\n      storeTokens(access_token, refresh_token);\r\n\r\n      // Set user data\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      \r\n      let errorMessage = 'Login failed';\r\n      if (error.response?.data?.detail) {\r\n        errorMessage = error.response.data.detail;\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n\r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setTokens({ access_token: null, refresh_token: null });\r\n    clearStoredTokens();\r\n  };\r\n\r\n  // Refresh tokens\r\n  const refreshTokens = async (refreshToken) => {\r\n    try {\r\n      if (!refreshToken) return false;\r\n\r\n      const response = await axios.post(`${BACKEND_URL}/auth/refresh`, {\r\n        refresh_token: refreshToken\r\n      });\r\n\r\n      const { access_token, refresh_token: new_refresh_token } = response.data;\r\n\r\n      // Update tokens\r\n      setTokens({ access_token, refresh_token: new_refresh_token });\r\n      storeTokens(access_token, new_refresh_token);\r\n\r\n      // Get updated user info\r\n      const userData = await getCurrentUser(access_token);\r\n      if (userData) {\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Token refresh error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Setup axios interceptor for automatic token refresh (temporarily disabled for debugging)\r\n  useEffect(() => {\r\n    // Temporarily comment out the interceptor to debug CORS issues\r\n    /*\r\n    const interceptor = axios.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n\r\n          const refreshed = await refreshTokens(tokens.refresh_token);\r\n          if (refreshed && tokens.access_token) {\r\n            originalRequest.headers.Authorization = `Bearer ${tokens.access_token}`;\r\n            return axios(originalRequest);\r\n          } else {\r\n            logout();\r\n          }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      axios.interceptors.response.eject(interceptor);\r\n    };\r\n    */\r\n    \r\n    // Set default axios headers instead\r\n    if (tokens.access_token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${tokens.access_token}`;\r\n    }\r\n    \r\n    return () => {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    };\r\n  }, [tokens.refresh_token, tokens.access_token]);\r\n\r\n  // Get authorization header\r\n  const getAuthHeader = () => {\r\n    return tokens.access_token ? { Authorization: `Bearer ${tokens.access_token}` } : {};\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role) => {\r\n    return user?.role === role;\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return hasRole('admin');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    refreshTokens,\r\n    getAuthHeader,\r\n    hasRole,\r\n    isAdmin,\r\n    tokens\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}